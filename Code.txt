import tkinter as tk 
from tkinter import messagebox 
from datetime import datetime 
import time 
import threading 
 
# Class for Medicine Monitoring System 
class MedMonitoringSystem: 
    def __init__(self, root): 
        self.root = root 
        self.root.title("Medicine Monitoring System") 
        self.root.geometry("400x300") 
        self.root.configure(bg="#EEEEEE")  # Set light gray background color 
 
        self.meds_info = [] 
        self.current_meds = 0  # To keep track of current medicine input process 
        self.total_meds = 0    # To store total number of medicines 
 
        # Create a top panel 
        self.top_panel = tk.Frame(self.root, bg="#222831", height=50) 
        self.top_panel.pack(fill=tk.X) 
 
        # Start UI setup 
        self.setup_ui() 
 
    # Font settings 
    def get_font(self, size, weight="bold"):  # Set default weight to bold 
        return ("Montserrat", size, weight) 
 
    # Create rounded rectangle method 
    def create_rounded_rectangle(self, x1, y1, x2, y2, radius=10, **kwargs): 
        # Create a list of coordinates for a rounded rectangle 
        points = [ 
            (x1 + radius, y1), (x2 - radius, y1), 
            (x2, y1), (x2, y1 + radius), 
            (x2, y2 - radius), (x2, y2), 
            (x2 - radius, y2), (x1 + radius, y2), 
            (x1, y2), (x1, y2 - radius), 
            (x1, y1 + radius), (x1, y1) 
        ] 
        # Flatten the list of points for create_polygon 
        flat_points = [coord for point in points for coord in point] 
        return self.canvas.create_polygon(flat_points, **kwargs, smooth=True) 
 
    # Rounded button creation 
    def create_rounded_button(self, text, command, bg_color, fg_color): 
        # Create a frame to hold the rounded button 
        frame = tk.Frame(self.root, bg=bg_color, bd=0, highlightthickness=0) 
        frame.pack(pady=5)  # Adjusted padding for smaller button 
 
        # Create a canvas to draw the rounded button 
        self.canvas = tk.Canvas(frame, width=120, height=30, bg=bg_color, highlightthickness=0)  # 
Smaller width and height 
        self.canvas.pack() 
 
        # Draw a rounded rectangle 
        self.create_rounded_rectangle(0, 0, 120, 30, radius=15, fill=bg_color, outline=bg_color) 
 
        # Create button text 
        self.canvas.create_text(60, 15, text=text, fill=fg_color, font=self.get_font(10, "bold"))  # Adjusted 
font size 
 
        # Bind button click event 
        self.canvas.bind("<Button-1>", lambda event: command()) 
 
    # Initial UI to ask number of medicines 
    def setup_ui(self): 
        # Update label to use Montserrat font and make it bold 
        self.lbl_num_meds = tk.Label(self.top_panel, text="Medicine Monitoring System", 
bg="#222831", fg="white", font=self.get_font(12, "bold"), anchor="w")  # Reduced font size 
        self.lbl_num_meds.pack(pady=10, padx=10, fill=tk.X) 
 
        # Change here: Make the label bold and set the color to #222831 
        self.lbl_num_meds_prompt = tk.Label(self.root, text="How many medicines per day?", 
bg="#EEEEEE", fg="#222831", font=self.get_font(12, "bold"))  # Bold font 
        self.lbl_num_meds_prompt.pack(pady=10, anchor='center') 
 
        self.num_meds_var = tk.StringVar() 
        self.entry_num_meds = tk.Entry(self.root, textvariable=self.num_meds_var, 
font=self.get_font(12), bg="#31363F", fg="white", insertbackground='white', 
highlightbackground="#222831", highlightcolor="#222831", highlightthickness=1) 
        self.entry_num_meds.pack(pady=5, anchor='center')  # Center align the entry 
 
        self.create_rounded_button("Submit", self.get_medicine_details, "#76ABAE", "white") 
         
        self.root.bind('<Return>', lambda event: self.get_medicine_details())  # Bind Enter key to submit 
 
    # Gather medicine details (name, dosage, time, etc.) 
    def get_medicine_details(self): 
        try: 
            # Get total number of medicines 
            self.total_meds = int(self.num_meds_var.get()) 
            self.clear_ui() 
            self.ask_for_medicine_details() 
 
        except ValueError: 
            messagebox.showerror("Invalid Input", "Please enter a valid number of medicines.") 
 
    # Clears the current UI elements 
    def clear_ui(self): 
        for widget in self.root.winfo_children(): 
            widget.pack_forget() 
        self.top_panel.pack(fill=tk.X)  # Keep the top panel 
 
    # Asks for details for each medicine one at a time 
    def ask_for_medicine_details(self): 
        if self.current_meds < self.total_meds: 
            med_num = self.current_meds + 1 
 
            # Medicine Name 
            self.lbl_med_name = tk.Label(self.root, text=f"Enter medicine {med_num} name:", 
bg="#EEEEEE", font=self.get_font(12)) 
            self.lbl_med_name.pack(pady=5) 
 
            self.med_name_var = tk.StringVar() 
            self.entry_med_name = tk.Entry(self.root, textvariable=self.med_name_var, 
font=self.get_font(12), bg="#31363F", fg="white", insertbackground='white', 
highlightbackground="#222831", highlightcolor="#222831", highlightthickness=1) 
            self.entry_med_name.pack(pady=5) 
 
            # Dosage per day 
            self.lbl_dosage = tk.Label(self.root, text=f"Enter dosage per day for medicine {med_num}:", 
bg="#EEEEEE", font=self.get_font(12)) 
            self.lbl_dosage.pack(pady=5) 
 
            self.dosage_var = tk.StringVar() 
            self.entry_dosage = tk.Entry(self.root, textvariable=self.dosage_var, font=self.get_font(12), 
bg="#31363F", fg="white", insertbackground='white', highlightbackground="#222831", 
highlightcolor="#222831", highlightthickness=1) 
            self.entry_dosage.pack(pady=5) 
 
            # Time of intake (HH:MM AM/PM) 
            self.lbl_time = tk.Label(self.root, text=f"Enter time for medicine {med_num} (HH:MM 
AM/PM):", bg="#EEEEEE", font=self.get_font(12)) 
            self.lbl_time.pack(pady=5) 
 
            self.time_var = tk.StringVar() 
            self.entry_time = tk.Entry(self.root, textvariable=self.time_var, font=self.get_font(12), 
bg="#31363F", fg="white", insertbackground='white', highlightbackground="#222831", 
highlightcolor="#222831", highlightthickness=1) 
            self.entry_time.pack(pady=5) 
 
            # Button to submit medicine details (also bound to Enter key) 
            self.create_rounded_button("Next", self.store_medicine_details, "#76ABAE", "white") 
        else: 
            self.start_tracking() 
 
    # Store medicine details 
    def store_medicine_details(self): 
        med_name = self.med_name_var.get() 
        dosage = self.dosage_var.get() 
        med_time = self.time_var.get() 
 
        if med_name and dosage.isdigit() and self.validate_time(med_time): 
            self.meds_info.append((med_name, int(dosage), med_time)) 
 
            # Clear the previous input fields 
            self.clear_ui() 
 
            # Move to next medicine input 
            self.current_meds += 1 
            self.ask_for_medicine_details() 
        else: 
            messagebox.showerror("Invalid Input", "Please enter valid medicine details.") 
 
    # Function to validate the entered time (HH:MM AM/PM) 
    def validate_time(self, time_str): 
        try: 
            datetime.strptime(time_str, '%I:%M %p')  # Try to parse the time 
            return True 
        except ValueError: 
            return False 
 
    # Start tracking the medicines 
    def start_tracking(self): 
        self.clear_ui() 
        tk.Label(self.root, text="Tracking started!", bg="#EEEEEE", font=self.get_font(14)).pack(pady=20) 
         
        for med_name, dosage, med_time in self.meds_info: 
            self.schedule_medicine(med_name, med_time) 
 
        # Start a separate thread to check for notifications 
        threading.Thread(target=self.check_notifications, daemon=True).start() 
 
    # Convert time to 24-hour format and schedule notifications 
    def schedule_medicine(self, med_name, med_time): 
        time_obj = datetime.strptime(med_time, '%I:%M %p').time() 
        print(f"Scheduled {med_name} at {time_obj}") 
 
    # Check if it's time for medication and notify 
    def check_notifications(self): 
        while True: 
            current_time = datetime.now().time() 
            for med_name, _, med_time in self.meds_info: 
                time_obj = datetime.strptime(med_time, '%I:%M %p').time() 
 
                # Check if the current time matches the scheduled time 
                if current_time.hour == time_obj.hour and current_time.minute == time_obj.minute: 
                    self.show_notification(med_name) 
 
            time.sleep(60)  # Check every minute 
 
    # Show notification popup 
    def show_notification(self, med_name): 
        messagebox.showinfo("Medicine Reminder", f"Time to take your medicine: {med_name}") 
        print(f"Notification: Time to take {med_name}") 
 
# Main application runner 
if __name__ == "__main__": 
    root = tk.Tk() 
    app = MedMonitoringSystem(root) 
    root.mainloop() 